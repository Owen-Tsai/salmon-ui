@use './common/var.scss' as *;
@use './mixins/main.scss';
@use './mixins/button.scss';
@use './common/transition' as *;
@use 'sass:map';

.sui-button {
  --padding-medium: 0 15px;
  --padding-mini: 0 11px;
  --padding-small: 0 15px;
  --padding-large: 0 19px;
  --hover-opacity: 0.16;
  --active-opacity: 0.32;

  $status-normal: ':not(.is-disabled):not(.is-loading)';
  $ns: '.sui-button';

  user-select: none;
  position: relative;
  display: inline-block;
  box-sizing: border-box;
  border-radius: map.get($sizes-radius, 'base');
  font-weight: 400;
  font-size: map.get($sizes-text, 'body-3');
  line-height: $line-height-base;
  white-space: nowrap;
  outline: none;
  cursor: pointer;
  transition: all map.get($durations, '1') map.get($timings, 'linear');
  -webkit-appearance: none;
  border: 1px solid;

  &:active {
    transition: none;
  }

  &.is-block {
    display: block;
    width: 100%;
  }

  &.is-icon-only {
    display: flex;
    justify-content: center;
  }

  &.is-disabled {
    color: map.get($text-colors, 'placeholder');
    border-color: map.get($border-colors, 'light-1');
    cursor: not-allowed;
  }

  // size
  @include button.use-size('medium');
  @include button.use-size('large');
  @include button.use-size('small');
  @include button.use-size('mini');

  // shapes
  &--rounded {
    border-radius: map.get($border-radiuses, 'rounded');
  }
  &--circle {
    border-radius: map.get($border-radiuses, 'circle');
    width: map.get($component-common-sizes, 'base');

    &#{$ns}--large {
      width: map.get($component-common-sizes, 'large');
    }
    &#{$ns}--small {
      width: map.get($component-common-sizes, 'small');
    }
  }

  &--default {
    @include button.make-button(primary);
  }
  &.is-danger {
    @include button.make-button(error);
  }
  &.is-ghost#{$status-normal} {
    background-color: transparent;
    color: $color-white;
    border-color: $color-white;

    &:hover {
      background-color: rgba($color-white, var(--hover-opacity));
      border-color: $color-white;
    }
    &:focus {
      background-color: rgba($color-white, var(--hover-opacity));
      border-color: $color-white;
      @include main.use-ring($color-white);
    }
    &:active {
      border-color: $color-white;
      background-color: rgba($color-white, var(--active-opacity));
    }
  }

  &--primary {
    @include button.make-primary-button(primary);

    &.is-danger {
      @include button.make-primary-button(error);
    }
    &.is-ghost#{$status-normal} {
      background-color: map.get($surface-colors, 'light-4');
      color: map.get($colors, primary, 'base');
      border-color: map.get($surface-colors, 'light-4');

      &:hover {
        background-color: $color-white;
        border-color: $color-white;
      }
      &:focus {
        background-color: $color-white;
        border-color: $color-white;
      }
      &:active {
        background-color: map.get($surface-colors, 'light-3');
        border-color: map.get($surface-colors, 'light-3');
      }
    }
  }

  &--outlined {
    @include button.make-outlined-button(primary);

    &.is-danger {
      @include button.make-outlined-button(error);
    }
    &.is-ghost#{$status-normal} {
      &:hover {
        background-color: $color-white;
        border-color: $color-white;
        color: map.get($colors, primary, 'base');
      }
      &:focus {
        background-color: $color-white;
        border-color: $color-white;
        color: map.get($colors, primary, 'base');
      }
      &:active {
        background-color: map.get($surface-colors, 'light-3');
        border-color: map.get($surface-colors, 'light-3');
      }
    }
  }

  &--text {
    @include button.make-text-button(primary);

    &.is-danger {
      @include button.make-text-button(error); 
    }
    &.is-ghost#{$status-normal} {
      border-color: transparent !important;
      color: $color-white !important;
      &:hover {
        background-color: rgba($color-white, var(--hover-opacity));
      }
      &:focus {
        background-color: rgba($color-white, var(--hover-opacity));
      }
      &:active {
        background-color: rgba($color-white, var(--active-opacity));
      }
    }
  }

  // status
  &.is-loading {
    cursor: default;
    position: relative;

    &::before {
      content: "";
      right: -1px;
      bottom: -1px;
      top: -1px;
      left: -1px;
      position: absolute;
      background-color: rgba($color-white, $opacity-mod);
    }
  }

  .loader.rotating {
    animation: rotate 2s linear infinite;
  }
}