@use 'sass:map';
@use 'common/var.scss' as *;
@use 'mixins/main.scss';
@use 'mixins/tag.scss' as *;

.sui-tag {
  $ns: '.sui-tag';
  --padding: 0 8px;
  --size-lg: 32px;
  --size-md: 24px;
  --size-sm: 20px;
  // common
  display: inline-flex;
  align-items: center;
  font-size: map.get($sizes-text, 'body-1');
  border-radius: map.get($sizes-radius, 'square');
  padding: var(--padding);
  box-sizing: border-box;
  vertical-align: middle;
  transition: all map.get($durations, '1') map.get($timings, 'linear');
  background-color: var(--sui-fill-2);
  border: 1px solid var(--sui-fill-2);
  color: var(--sui-text-1);

  &__close-btn {
    @include main.reset-default-button;
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0;
    font-size: inherit;
    margin-left: 4px;
    color: inherit;
    &::before {
      content: "";
      position: absolute;
      display: block;
      width: map.get($sizes-text, 'body-1') + 4px;
      height: map.get($sizes-text, 'body-1') + 4px;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: transparent;
      border-radius: map.get($sizes-radius, 'circle');
      transition: background-color map.get($durations, '1') map.get($timings, 'linear');
    }

    &:hover::before {
      background-color: var(--sui-fill-3);
    }
    #{$ns}__close-token {
      position: relative;
    }
  }

  // sizes
  height: var(--size-md);
  line-height: calc(var(--size-md) - 2px);
  &#{$ns}--large {
    height: var(--size-lg);
    line-height: calc(var(--size-lg) - 2px);
    font-size: map.get($sizes-text, 'body-3');
  }
  &#{$ns}--small {
    height: var(--size-sm);
    line-height: calc(var(--size-sm) - 2px);
  }

  &.is-outlined {
    border-color: var(--sui-border-2);
  }

  // types
  $types: 'primary', 'warning', 'error', 'success';
  @each $type in $types {
    &#{$ns}--#{$type} {
      @include tag($type);
      &.is-outlined {
        @include outlined-tag($type);
      }
    }
  }
}
