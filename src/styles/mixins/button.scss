@use 'sass:map';
@use '../common/var.scss' as *;
@use './main.scss';

@mixin use-button-types($type) {
  &--#{$type} {
    @if ($type == 'primary') {
      @include primary-button('primary');
      &.is-danger {
        @include primary-button('error');
      }
    }
    @if ($type == 'default') {
      @include default-button('primary');
      &.is-danger {
        @include default-button('error');
      }
    }
    @if ($type == 'outlined') {
      @include outlined-button('primary');
      &.is-danger {
        @include outlined-button('error');
      }
    }
    @if ($type == 'text') {
      @include text-button('primary');
      &.is-danger {
        @include text-button('error');
      }
    }
  }
}

@mixin default-button($type) {
  background-color: transparent;
  border-color: var(--sui-border-1);
  color: var(--sui-text-2);

  &:not(.is-disabled):not(.is-loading) {
    &:hover {
      color: var(--sui-#{$type}-6);
      border-color: var(--sui-#{$type}-3);
      background-color: var(--sui-#{$type}-1);
    }
    &:focus-visible {
      @include main.use-ring(var(--sui-#{$type}-6));
      color: var(--sui-#{$type}-6);
      border-color: var(--sui-#{$type}-3);
      background-color: var(--sui-#{$type}-1);
    }
    &:active {
      color: var(--sui-#{$type}-6);
      border-color: var(--sui-#{$type}-6);
      background-color: var(--sui-#{$type}-1);
    }
  }
  &.is-disabled {
    cursor: not-allowed;
  }
  &.is-loading, &.is-disabled {
    background-color: var(--sui-fill-1);
    color: var(--sui-text-3);
  }
}

@mixin primary-button($type) {
  background-color: var(--sui-#{$type}-6);
  color: var(--sui-white);
  border-color: var(--sui-#{$type}-6);

  &:not(.is-disabled):not(.is-loading) {
    &:hover {
      background-color: var(--sui-#{$type}-5);
      border-color: var(--sui-#{$type}-5);
      color: var(--sui-white);
    }
    &:focus-visible {
      @include main.use-ring(var(--sui-#{$type}-6));
      background-color: var(--sui-#{$type}-5);
      border-color: var(--sui-#{$type}-5);
      color: var(--sui-white);
    }
    &:active {
      background-color: var(--sui-#{$type}-7);
      border-color: var(--sui-#{$type}-7);
      color: var(--sui-white);
    }
  }
  &.is-disabled {
    cursor: not-allowed;
  }
  &.is-loading, &.is-disabled {
    background-color: var(--sui-#{$type}-3);
    border-color: var(--sui-#{$type}-3);
    color: var(--disabled-primary-text-color);
  }
}

@mixin outlined-button($type) {
  background-color: transparent;
  color: var(--sui-#{$type}-6);
  border-color: var(--sui-#{$type}-6);

  &:not(.is-disabled):not(.is-loading) {
    &:hover {
      color: var(--sui-#{$type}-5);
      border-color: var(--sui-#{$type}-5);
      background-color: transparent;
    }
    &:focus-visible {
      color: var(--sui-#{$type}-5);
      border-color: var(--sui-#{$type}-5);
      @include main.use-ring(var(--sui-#{$type}-6));
    }
    &:active {
      color: var(--sui-#{$type}-7);
      border-color: var(--sui-#{$type}-7);
    }
  }
  &.is-disabled {
    cursor: not-allowed;
  }
  &.is-loading, &.is-disabled {
    border-color: var(--sui-#{$type}-4);
    color: var(--sui-#{$type}-4);
  }
}

@mixin text-button($type) {
  background-color: transparent;
  border-color: transparent;
  color: var(--sui-#{$type}-6);

  &:not(.is-disabled):not(.is-loading) {
    &:hover {
      color: var(--sui-#{$type}-5);
      background-color: var(--sui-fill-2);
      border-color: var(--sui-fill-2);
    }
    &:focus-visible {
      @include main.use-ring(var(--sui-fill-3));
      border-color: transparent;
      background-color: transparent;
    }
    &:active {
      color: var(--sui-#{$type}-7);
      background-color: var(--sui-fill-3);
      border-color: var(--sui-fill-3);
    }
  }
  &.is-disabled {
    color: var(--sui-#{$type}-4);
    cursor: not-allowed;
  }
  &.is-loading {
    color: var(--sui-#{$type}-4);
  }
}

@mixin use-size($size) {
  $height: map.get($sizes-component, #{$size});
  &--#{$size} {
    height: $height;
    padding: var(--padding-#{$size});
    &.is-icon-only {
      width: $height;
      padding: 0;
    }
    @if ($size == 'mini') {
      font-size: map.get($sizes-text, 'body-2');
    }
  }
}

@mixin use-shape($shape) {
  &--#{$shape} {
    border-radius: map.get($sizes-radius, '#{$shape}');
  }
}
